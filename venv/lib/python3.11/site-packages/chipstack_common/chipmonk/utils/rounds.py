from chipstack_common.chipmonk.collection_library import ChipmonkRound
from chipstack_common.llm.config import InferenceOptions, ModelSelection
from dataclasses import dataclass
from langchain_core.messages import BaseMessage
from typing import List


@dataclass(frozen=True)
class GeneratedRound(ChipmonkRound):

    _model_selection: ModelSelection
    _inference_options: InferenceOptions
    _messages: List[BaseMessage]

    def messages(self) -> List[BaseMessage]:
        return self._messages

    def inference_options(self) -> InferenceOptions:
        return self._inference_options

    def model_selection(self) -> ModelSelection:
        return self._model_selection


def single_round(
    model_selection: ModelSelection,
    inference_options: InferenceOptions,
    messages: List[BaseMessage],
) -> List[ChipmonkRound]:
    return [GeneratedRound(model_selection, inference_options, messages)]


def rounds(
    model_selection: ModelSelection,
    inference_options: InferenceOptions,
    messages: List[BaseMessage],
) -> List[ChipmonkRound]:
    return [GeneratedRound(model_selection, inference_options, [m]) for m in messages]
