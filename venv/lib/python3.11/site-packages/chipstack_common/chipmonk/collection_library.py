from abc import ABC, abstractmethod
from chipstack_common.llm.config import (
    InferenceOptions,
    ModelSelection,
)
from langchain_core.messages import BaseMessage
from typing import Generic, List, Optional, TypeVar


# The structured data type returned by a ChipmonkTask's `parse_response` method.
T = TypeVar("T")


class ChipmonkRound(ABC):
    """
    A single interaction of call and response from an LLM.

    Chipmonk model primitives may include multiple rounds; e.g. temperature sweeps, or
    LLM model judging may call one or more LLMs one or more times then aggregate the
    results.
    """

    @abstractmethod
    def messages(self) -> List[BaseMessage]:
        """Messages to pass to the LLM."""
        pass

    @abstractmethod
    def inference_options(self) -> InferenceOptions:
        """Options for performing inference, such as temperature."""
        pass

    @abstractmethod
    def model_selection(self) -> ModelSelection:
        """
        The model to use for this round of inference.

        Note that this is a recommendation, and Chipmonk will always recommend
        in-house models. If a client wants to pick a different provider or model,
        this is possible.
        """
        pass


class ChipmonkTask(ABC, Generic[T]):
    """
    A container for information and handling related to a specific Chipmonk task.

    A task is one of the primitives in Chipmonk models. Examples include
    generating scenarios for a design file, or generating tests for scenarios.
    """

    @abstractmethod
    def task_rounds(self) -> List[ChipmonkRound]:
        pass

    @abstractmethod
    def parse_responses(self, raw_llm_responses: List[str]) -> Optional[T]:
        """
        Given a list of raw LLM responses from 1 or more rounds, converts it into structured data.

        If this is not possible, returns an empty response.
        """
        pass


class ChipmonkTaskCollection(ABC):
    """For a given model version, maintains a collection of task handlers."""

    @abstractmethod
    def get_scenarios(self, file_contents: str, **kwargs) -> ChipmonkTask:
        """A task handler for generating test scenarios from RTL files."""
        pass

    @abstractmethod
    def get_sva_for_scenarios(
        self, file_contents: str, scenarios: List[str], **kwargs
    ) -> ChipmonkTask:
        """A task handler for generating SVA code from an RTL file and scenarios to test."""
        pass
