import chipstack_common.svutils.regex as regex_patterns
import re

from chipstack_common.string_handlers.strings import (
    remove_leading_empty_lines,
    remove_trailing_empty_lines,
)


def remove_backtick_block(code_block: str) -> str:
    """
    Cleans the code by removing any "```verilog" or "```systemverilog" strings.

    Args:
        code (str): The code to be cleaned.

    Returns:
        str: The cleaned code.
    """
    return (
        code_block.replace("```verilog", "")
        .replace("```systemverilog", "")
        .replace("```json", "")
        .replace("```", "")
        .strip()
    )


def remove_comments_from_sv_code(code):
    return re.sub(r"(\/\/.*|\/\*[\s\S]*?\*\/)", "", code).strip()


def collapse_newlines(code):
    return re.sub(r"\n+", "\n", code).strip()


def remove_tab_and_newline(code):
    return re.sub(r"\n\s*\n", "\n", code).strip()


def standardize_code(code: str) -> str:
    """Standardizes the code by removing unnecessary newlines and comments."""
    return collapse_newlines(remove_tab_and_newline(remove_comments_from_sv_code(code)))


def remove_code_formatting(code_block: str) -> str:
    code_block = code_block.strip()
    # remove block start or end patterns
    code_block = re.sub(
        regex_patterns.BLOCK_FORMAT_START_REGEX
        + "|"
        + regex_patterns.BLOCK_FORMAT_END_REGEX,
        "",
        code_block,
        flags=re.IGNORECASE,
    )
    # If the completion is a single line (i.e., just a single backtick on each side), remove the backticks
    code_block = re.sub(r"^`|`$", "", code_block)
    # For mixtral model
    code_block = code_block.replace("\\", "")  # remove backslashes
    code_block = remove_leading_empty_lines(code_block)
    code_block = remove_trailing_empty_lines(code_block)

    return code_block
