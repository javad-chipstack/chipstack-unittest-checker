from chipstack_common.svutils.sv_parser import parse_code_into_module
from chipstack_common.svutils.sv_parse_types import (
    ModulePort,
    ModuleParameter,
    Clock,
    Reset,
)


def test_parse_code_into_module_simple():
    """
    Test the parse_code_into_module method of the StaticSVparse_code_into_moduler class.

    This function calls the parse_code_into_module method and asserts that the returned Module object
    has the correct name, parameters, input_ports, and output_ports.
    """
    sv_file = """
    module test_module(
        input wire clk,
        input wire reset,
        output wire out
    );
    endmodule
    """
    module = parse_code_into_module(sv_file)

    assert module.name == "test_module"
    assert module.parameters == []
    assert module.clock_ports == [
        Clock(name="clk", type="wire"),
    ]
    assert module.reset_ports == [
        Reset(name="reset", type="wire"),
    ]
    assert module.input_ports == []
    assert module.input_ports == []
    assert module.output_ports == [ModulePort(name="out", type="wire")]


def test_parse_code_into_module_complex():
    """
    Test the parse_code_into_module method with a complex module

    This function creates a StaticSVparse_code_into_moduler object with a mock SystemVerilog file.
    It then calls the parse_code_into_module method and asserts that the returned Module object
    has the correct name, parameters, input_ports, and output_ports.
    """
    sv_file = """
        module cdc_fifo #(
        parameter int SYNC_STAGE = 3,  // Number of stages in the synchronization pipeline
        parameter int ADDR_WIDTH = 3,  // Width of the address bus
        parameter int DATA_WIDTH = 8,  // Width of the data bus
        parameter int FIFO_DEPTH = 16  // Depth of the FIFO
    ) (
        input  logic                  wclk,    // Write clock
        input  logic                  wreset,  // Write reset
        input  logic                  wvalid,  // Write data valid
        output logic                  wready,  // Write ready
        input  logic [DATA_WIDTH-1:0] wdata,   // Write data
        output logic                  wfull,   // Write full flag

        input  logic                  rclk,    // Read clock
        input  logic                  rreset,  // Read reset
        output logic                  rvalid,  // Read data valid
        input  logic                  rready,  // Read ready
        output logic [DATA_WIDTH-1:0] rdata,   // Read data
        output logic                  rempty   // Read empty flag
    );
    """
    module = parse_code_into_module(sv_file)
    assert module.name == "cdc_fifo"
    assert module.parameters == [
        ModuleParameter(name="SYNC_STAGE", type="int", kind="parameter", value="3"),
        ModuleParameter(name="ADDR_WIDTH", type="int", kind="parameter", value="3"),
        ModuleParameter(name="DATA_WIDTH", type="int", kind="parameter", value="8"),
        ModuleParameter(name="FIFO_DEPTH", type="int", kind="parameter", value="16"),
    ]
    assert module.clock_ports == [
        Clock(name="wclk", type="logic"),
        Clock(name="rclk", type="logic"),
    ]
    assert module.reset_ports == [
        Reset(name="wreset", type="logic"),
        Reset(name="rreset", type="logic"),
    ]
    assert module.input_ports == [
        ModulePort(name="wvalid", type="logic"),
        ModulePort(name="wdata", type="logic [DATA_WIDTH-1:0]"),
        ModulePort(name="rready", type="logic"),
    ]
    assert module.output_ports == [
        ModulePort(name="wready", type="logic"),
        ModulePort(name="wfull", type="logic"),
        ModulePort(name="rvalid", type="logic"),
        ModulePort(name="rdata", type="logic [DATA_WIDTH-1:0]"),
        ModulePort(name="rempty", type="logic"),
    ]


def test_parse_code_into_module_expressions_in_parameters():
    """
    Test the parse_code_into_module method with expressions in parameters

    This function calls the parse_code_into_module method and asserts that the returned Module object
    has the correct name, parameters, input_ports, and output_ports.

    """
    sv_file = """
    module test_module #(
        parameter int HEIGHT = WIDTH * 2 ? A == B : C == D
    ) (
        input wire clk,
    );
    endmodule
    """
    module = parse_code_into_module(sv_file)
    assert module.name == "test_module"
    assert module.parameters == [
        ModuleParameter(
            name="HEIGHT",
            type="int",
            kind="parameter",
            value="WIDTH * 2 ? A == B : C == D",
        ),
    ]
    assert module.clock_ports == [
        Clock(name="clk", type="wire"),
    ]
    assert module.reset_ports == []
    assert module.input_ports == []
    assert module.output_ports == []


def test_parse_code_into_module_no_type_in_parameters():
    """
    Test the parse_code_into_module method with expressions in parameters

    This function calls the parse_code_into_module method and asserts that the returned Module object
    has the correct name, parameters, input_ports, and output_ports.

    """
    sv_file = """
    module test_module #(
        parameter HEIGHT = WIDTH * 2 ? A == B : C == D
    ) (
        input wire clk,
    );
    endmodule
    """
    module = parse_code_into_module(sv_file)
    assert module.name == "test_module"
    assert module.parameters == [
        ModuleParameter(
            name="HEIGHT",
            type="int",
            kind="parameter",
            value="WIDTH * 2 ? A == B : C == D",
        ),
    ]
    assert module.clock_ports == [
        Clock(name="clk", type="wire"),
    ]
    assert module.reset_ports == []
    assert module.input_ports == []
    assert module.output_ports == []


def test_parse_code_into_module_formatting():
    """
    Test the parse_code_into_module method with abnormal formatting

    This function calls the parse_code_into_module method and asserts that the returned Module object
    has the correct name, parameters, input_ports, and output_ports.
    """
    sv_file = """
    module test_module(input wire clk,input wire reset,

        output wire out,
                            output wire out2
    );endmodule
    """
    module = parse_code_into_module(sv_file)
    assert module.name == "test_module"
    assert module.parameters == []
    assert module.clock_ports == [
        Clock(name="clk", type="wire"),
    ]
    assert module.reset_ports == [
        Reset(name="reset", type="wire"),
    ]
    assert module.input_ports == []
    assert module.output_ports == [
        ModulePort(name="out", type="wire"),
        ModulePort(name="out2", type="wire"),
    ]


def test_parse_code_into_module_no_params_or_ports():
    """
    Test the parse_code_into_module method with no ports or parameters

    This function calls the parse_code_into_module method and asserts that the returned Module object
    has the correct name, parameters, input_ports, and output_ports.
    """
    sv_file = """
    module test_module();

    endmodule
    """

    module = parse_code_into_module(sv_file)
    assert module.name == "test_module"
    assert module.parameters == []
    assert module.input_ports == []
    assert module.output_ports == []


def test_parse_code_into_module_empty():
    """
    Test the parse_code_into_module method with no ports or parameters

    This function calls the parse_code_into_module method and asserts that the returned Module object
    has the correct name, parameters, input_ports, and output_ports.
    """
    sv_file = ""

    module = parse_code_into_module(sv_file)
    assert module.name == ""
    assert module.parameters == []
    assert module.input_ports == []
    assert module.output_ports == []
