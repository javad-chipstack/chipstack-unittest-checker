from chipstack_common.svutils.sv_parse_types import (
    Module,
    ModuleParameter,
    ModulePort,
    Clock,
    Reset,
)


def test_module_init_no_clock_reset():
    """
    Test the __init__ method of the Module class

    This function creates a Module object and asserts that the object has the correct attributes.
    """
    param = ModuleParameter(name="parameter", type="parameter", kind="input", value="1")
    input_port = ModulePort(name="input_port", type="input")
    output_port = ModulePort(name="output_port", type="output")
    module = Module(
        name="test_module",
        parameters=[param],
        input_ports=[input_port],
        output_ports=[output_port],
    )
    assert module.name == "test_module"
    assert module.parameters == [param]
    assert module.input_ports == [input_port]
    assert module.output_ports == [output_port]
    assert module.interfaces == []
    assert module.clock_ports == []
    assert module.reset_ports == []
    assert module.instance == ""


def test_module_init_clock_reset():
    """
    Test the __init__ method of the Module class

    This function creates a Module object with clock and reset ports and asserts that the object has the correct attributes.
    """
    param = ModuleParameter(name="parameter", type="parameter", kind="input", value="1")
    input_port = ModulePort(name="input_port", type="input")
    output_port = ModulePort(name="output_port", type="output")
    clock_port = Clock(name="clock_port", type="input")
    reset_port = Reset(name="reset_port", type="input")
    module = Module(
        name="test_module",
        parameters=[param],
        input_ports=[input_port],
        output_ports=[output_port],
        clock_ports=[clock_port],
        reset_ports=[reset_port],
    )
    assert module.name == "test_module"
    assert module.parameters == [param]
    assert module.input_ports == [input_port]
    assert module.output_ports == [output_port]
    assert module.interfaces == []
    assert module.clock_ports == [clock_port]
    assert module.reset_ports == [reset_port]
    assert module.instance == ""


def test_module_init_clock_reset_in_input():
    """
    Test the __init__ method of the Module class

    This function creates a Module object with clock and reset ports in the input ports and asserts that the object has the correct attributes.
    """
    param = ModuleParameter(name="parameter", type="parameter", kind="input", value="1")
    input_port = ModulePort(name="input_port", type="input")
    output_port = ModulePort(name="output_port", type="output")
    clock_port = ModulePort(name="clock_port", type="input")
    reset_port = ModulePort(name="reset_port", type="input")
    module = Module(
        name="test_module",
        parameters=[param],
        input_ports=[input_port, clock_port, reset_port],
        output_ports=[output_port],
    )
    assert module.name == "test_module"
    assert module.parameters == [param]
    assert module.input_ports == [input_port]
    assert module.output_ports == [output_port]
    assert module.interfaces == []
    assert module.clock_ports == [Clock(name=clock_port.name, type=clock_port.type)]
    assert module.reset_ports == [Reset(name=reset_port.name, type=reset_port.type)]
    assert module.instance == ""
