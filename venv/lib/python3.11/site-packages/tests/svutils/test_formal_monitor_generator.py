from chipstack_common.svutils.formal_monitor_generator import FormalTestCase, FormalCode
from chipstack_common.svutils.sv_parse_types import Module, ModulePort, INDENT_4_SPACE, INDENT_8_SPACE

def test_formal_test_case_to_code():
    """
    Test the to_code method of the FormalTestCase class

    This function creates a FormalTestCase object and asserts that the to_code method returns the correct code.
    """
    test_case = FormalTestCase(
        name="random_name",
        declaration="module test_module();",
        body_code="endmodule",
    )
    assert test_case.to_code() == "module test_module();\n\nendmodule"


def test_formal_test_case_from_code():
    """
    Test the from_code method of the FormalTestCase class

    This function creates a FormalTestCase object from a code string and asserts that the object has the correct attributes.
    """
    body_code = """
    name: assert A -> B;
    // false signal presence D
    name_2: assert B -> C;
"""
    full_code = f"""
module test_module;
{body_code}
endmodule
"""
    dut_parsed_model = Module(
        name="dut_module",
        parameters=[],
        input_ports=[
            ModulePort(name="A", type="logic"),
            ModulePort(name="D", type="logic"),
        ],
        output_ports=[ModulePort(name="B", type="reg")],
    )
    test_case = FormalTestCase.from_code(
        full_code, dut_parsed_model, name="test_module"
    )
    assert (
        test_case.declaration
        == f"module test_module\n{INDENT_4_SPACE}(\n{INDENT_8_SPACE}input logic A,\n{INDENT_8_SPACE}input logic B\n{INDENT_4_SPACE});\n"
    )
    assert test_case.body_code.strip() == body_code.strip()


def test_formal_code_to_code():
    """
    Test the to_code method of the FormalCode class

    This function creates a FormalCode object and asserts that the to_code method returns the correct code.
    """
    test_cases = [
        FormalTestCase(
            name="random_name",
            declaration="module test_module1();",
            body_code="logic A;",
        ),
        FormalTestCase(
            name="random_name",
            declaration="module test_module2();",
            body_code="logic B;",
        ),
        # name empty should be skipped
        FormalTestCase(
            name="",
            declaration="module test_module3();",
            body_code="logic C;",
        ),
        # body empty should be skipped
        FormalTestCase(
            name="random_name",
            declaration="module test_module4();",
            body_code="",
        ),
    ]
    formal_code = FormalCode(
        name="dut_module_monitor",
        dut_module=Module(
            name="dut_module",
            parameters=[],
            input_ports=[],
            output_ports=[],
        ),
        test_cases=test_cases,
    )
    assert (
        formal_code.to_code()
        == """module dut_module_monitor;\n\ntest_module1  test_module1_inst(.*);\ntest_module2  test_module2_inst(.*);\nendmodule\n\nmodule test_module1();\nlogic A;\nendmodule\n\nmodule test_module2();\nlogic B;\nendmodule\nbind dut_module dut_module_monitor  monitor (\n    \n    );"""
    )


def test_formal_code_from_codeblocks():
    """
    Test the from_codeblocks method of the FormalCode class

    This function creates a FormalCode object from a list of submodules and asserts that the object has the correct attributes.
    """
    test_body_code = "test_body_code"
    test_cases = [
        FormalTestCase(
            name="test_module1",
            declaration="module test_module1;\n",
            body_code=test_body_code,
        ),
        FormalTestCase(
            name="test_module2",
            declaration="module test_module2;\n",
            body_code=test_body_code,
        ),
    ]
    formal_code = FormalCode.from_codeblocks(
        dut_parsed_model=Module(
            name="dut_module",
            parameters=[],
            input_ports=[],
            output_ports=[],
        ),
        codeblocks=[test_case.to_code() for test_case in test_cases],
    )
    for idx in range(len(test_cases)):
        assert formal_code.test_cases[idx].declaration == test_cases[idx].declaration
        assert formal_code.test_cases[idx].body_code == test_cases[idx].body_code
        assert formal_code.test_cases[idx].name == test_cases[idx].name


def test_formal_code_parse_into_codeblocks():
    """
    Test the parse_into_codeblocks method of the FormalCode class

    This function creates a list of submodules from a code string and asserts that the list has the correct length.
    """
    code = """module top_module();\nendmodule\n\nmodule test_module1();\nendmodule\n\nmodule test_module2();\nendmodule\n\n"""
    submodules = FormalCode.parse_into_codeblocks(code)
    assert len(submodules) == 2
    assert submodules[0] == "module test_module1();\nendmodule"
    assert submodules[1] == "module test_module2();\nendmodule"
