"""Test module for chipstack_common.chipmonk.utils.parsing"""

from chipstack_common.chipmonk.utils.parsing import (
    ScenarioParseOptions,
    SvaParseOptions,
    try_parse_scenarios,
    try_parse_sva,
)


def test_empty_parse_options():
    empty_parse_options = ScenarioParseOptions()

    assert try_parse_scenarios("", empty_parse_options) == []
    assert (
        try_parse_scenarios("Assert that this is a scenario", empty_parse_options) == []
    )
    assert (
        try_parse_scenarios('["Assert that this is a scenario"]', empty_parse_options)
        == []
    )
    assert (
        try_parse_scenarios(
            '[{"scenario": "Assert that this is a scenario"}]', empty_parse_options
        )
        == []
    )


def test_parse_raw_regex():
    parse_options = ScenarioParseOptions(parse_raw_regex=True)

    assert try_parse_scenarios("Assert that this is a scenario", parse_options) == [
        "Assert that this is a scenario."
    ]
    assert try_parse_scenarios(
        "Assert that this is a scenario\nAssert that this is another scenario",
        parse_options,
    ) == ["Assert that this is a scenario.", "Assert that this is another scenario."]


def test_parse_bare_json_list():
    parse_options = ScenarioParseOptions(parse_as_json_list=True)

    assert try_parse_scenarios('["Assert that this is a scenario"]', parse_options) == [
        "Assert that this is a scenario"
    ]
    assert try_parse_scenarios(
        '["Assert that this is a scenario", "Assert that this is another scenario"]',
        parse_options,
    ) == ["Assert that this is a scenario", "Assert that this is another scenario"]


def test_parse_object_json_list():
    parse_options = ScenarioParseOptions(parse_as_json_list=True)

    assert try_parse_scenarios(
        '[{"scenario": "Assert that this is a scenario"}]', parse_options
    ) == ["Assert that this is a scenario"]
    assert try_parse_scenarios(
        '[{"scenario": "Assert that this is a scenario"}, {"scenario": "Assert that this is another scenario"}]',
        parse_options,
    ) == ["Assert that this is a scenario", "Assert that this is another scenario"]


def test_parse_bare_single_quoted_json_list():
    parse_options = ScenarioParseOptions(parse_as_single_quoted_json_list=True)

    assert try_parse_scenarios("['Assert that this is a scenario']", parse_options) == [
        "Assert that this is a scenario"
    ]
    assert try_parse_scenarios(
        "['Assert that this is a scenario', 'Assert that this is another scenario']",
        parse_options,
    ) == ["Assert that this is a scenario", "Assert that this is another scenario"]


def test_parse_object_single_quoted_json_list():
    """Single quote parsing does not cover objects in a list."""
    parse_options = ScenarioParseOptions(parse_as_single_quoted_json_list=True)

    assert (
        try_parse_scenarios(
            "[{'scenario': 'Assert that this is a scenario'}]", parse_options
        )
        == []
    )
    assert (
        try_parse_scenarios(
            "[{'scenario': 'Assert that this is a scenario'}, {'scenario': 'Assert that this is another scenario'}]",
            parse_options,
        )
        == []
    )


def test_parse_partial_bare_json_list():
    """Partial parsing does not cover raw string lists."""
    parse_options = ScenarioParseOptions(parse_partial_json_list=True)

    assert (
        try_parse_scenarios('["Assert that this is a scenario", ', parse_options) == []
    )


def test_parse_partial_object_json_list():
    parse_options = ScenarioParseOptions(parse_partial_json_list=True)

    assert try_parse_scenarios(
        '[{"scenario": "Assert that this is a scenario"}, ', parse_options
    ) == ["Assert that this is a scenario"]


def test_parse_non_json_prefix_bare_strings():
    parse_options = ScenarioParseOptions(
        parse_ignore_non_json_prefix=True, parse_as_json_list=True
    )

    assert try_parse_scenarios('["Assert that this is a scenario"]', parse_options) == [
        "Assert that this is a scenario"
    ]
    assert try_parse_scenarios(
        'Non-JSON prefix:\n\n["Assert that this is a scenario"]', parse_options
    ) == ["Assert that this is a scenario"]


def test_parse_non_json_prefix_object_list():
    parse_options = ScenarioParseOptions(
        parse_ignore_non_json_prefix=True, parse_as_json_list=True
    )

    assert try_parse_scenarios(
        '[{"scenario": "Assert that this is a scenario"}]', parse_options
    ) == ["Assert that this is a scenario"]
    assert try_parse_scenarios(
        'Non-JSON prefix:\n\n[{"scenario": "Assert that this is a scenario"}]',
        parse_options,
    ) == ["Assert that this is a scenario"]


def test_parse_sva_strip_prior_to_assertion_comment():
    parse_options = SvaParseOptions(strip_prior_to_assertion_comment=True)

    input = """
Here are the assertions for the scenario 'Formal_Scenario_2':

// Assertions
// Check that MatchEq is correctly computed: Ensure that MatchEq[i][j] is set to 1 when csr_values[i][j] is equal to tdata2[j] for all indices i and j.
generate
    for (genvar i = 0; i < num_triggers; i++) begin
        for (genvar j = 0; j < num_slots; j++) begin
            eq_check_A: assert property (@(posedge clk) disable iff (rst) MatchEq[i][j] == (csr_values[i][j] == tdata2[j]));
        end
    end
endgenerate"""
    expected_output = """// Assertions
// Check that MatchEq is correctly computed: Ensure that MatchEq[i][j] is set to 1 when csr_values[i][j] is equal to tdata2[j] for all indices i and j.
generate
    for (genvar i = 0; i < num_triggers; i++) begin
        for (genvar j = 0; j < num_slots; j++) begin
            eq_check_A: assert property (@(posedge clk) disable iff (rst) MatchEq[i][j] == (csr_values[i][j] == tdata2[j]));
        end
    end
endgenerate"""

    assert try_parse_sva(input, parse_options) == expected_output
