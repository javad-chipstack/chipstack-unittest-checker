"""Given an RTL file, get the Unit testing Scenarios for the RTL file via the Client class"""

import os
import json
import pickle
from random import shuffle
from chipstack_client.client_v2 import ClientV2


def get_unit_test_scenarios(rtl_file_path):
    """
    Generates unit test scenarios for a given RTL file.

    Args:
        rtl_file_path (str): The path to the RTL file.

    Returns:
        output: The generated unit test scenarios. The expected JSON format of output is:
        [
            {
                "name": "",
                "description": "",,
                "category": "",
            },
            ...
        ]
    """
    client = ClientV2()
    with open(rtl_file_path, encoding="utf-8") as file:
        rtl_file_content = file.read()
    parsed_design = client.parse_design(rtl_file_content)
    mental_model = client.generate_mental_model(rtl_file_content, parsed_design)
    output = client.generate_unit_test_scenarios(mental_model)
    return output


def get_unit_tests(rtl_path, output_path=os.getcwd()):
    """
    Generates unit tests for a given RTL file path for all .sv files in the directory.

    Args:
        rtl_path (str): The path to the RTL file.
        output_path (str, optional): The path to the output directory. Defaults to the current working directory.
    """
    scenarios = {}
    # check if output dir exists
    if not os.path.isdir(output_path):
        os.makedirs(output_path)

    for file in os.listdir(rtl_path):
        if file.endswith(".sv") or file.endswith(".v"):
            print(f"Generating unit test scenarios for {file}")
            rtl_file_path = os.path.join(rtl_path, file)
            output_file = os.path.join(
                output_path, file.split(".")[0] + "_unit_test_scenarios.json"
            )
            if os.path.exists(output_file):
                print(f"Unit test scenarios for {file} already exist. Skipping...")
                continue
            try:
                result = get_unit_test_scenarios(rtl_file_path)
            except Exception as e:
                print(
                    f"Failed to generate unit test scenarios for {file}. Error: {str(e)}"
                )
                continue
            with open(output_file, "w", encoding="utf-8") as f:
                try:
                    json_result = json.dumps(result)
                    f.write(json_result)
                except Exception:
                    f.write(str(result))
            scenarios[file] = result
    # Convert to pickle files. Create a directory and store the pickle files
    convert_json_files(rtl_path, output_path, os.path.join(output_path, "converted"))
    print("Unit Test Scenarios Generated Successfully!")


def convert_json_files(rtl_path, current_results_path, final_results_path):
    """
    Convert JSON files containing unit test scenarios to a pickle file format.

    Args:
        rtl_path (str): The path to the directory containing RTL files.
        current_results_path (str): The path to the directory where the JSON files are stored.
        final_results_path (str): The path to the directory where the converted pickle files will be saved.

    Returns:
        None
    """
    # check if output dir exists
    if not os.path.isdir(final_results_path):
        os.makedirs(final_results_path)

    # Loop through all the files
    for file_name in os.listdir(rtl_path):
        if file_name.endswith(".sv") or file_name.endswith(".v"):
            try:
                print(f"Processing {file_name}")
                rtl_file_path = os.path.join(rtl_path, file_name)
                # read RTL file
                with open(rtl_file_path, "r", encoding="utf-8") as file:
                    rtl = file.read()

                output_file = os.path.join(
                    current_results_path,
                    file_name.split(".")[0] + "_unit_test_scenarios.json",
                )

                try:
                    with open(output_file, "r", encoding="utf-8") as file:
                        data = json.load(file)
                except Exception as e:
                    print(
                        f"Failed to generate unit test scenarios for {file}. Error: {str(e)}"
                    )
                    continue
                converted_dict = {"file_content": rtl, "assertions": []}
                for scenario in data:
                    converted_dict["assertions"].append(
                        {
                            "assertion": "",
                            "scenario": scenario["description"],
                            "category": scenario["category"],
                        }
                    )

                new_file_path = os.path.join(final_results_path, f"{file_name}.pkl")
                with open(new_file_path, "wb") as new_file:
                    pickle.dump(converted_dict, new_file)
            except Exception as e:
                print(
                    f"Failed to generate unit test scenarios for {file_name}. Error: {str(e)}"
                )
                continue


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--rtl-path", help="Path to the folder with RTL files", required=True
    )
    parser.add_argument("--out-path", help="Path to the folder with results")
    args = parser.parse_args()
    # check if dir
    if not os.path.isdir(args.rtl_path):
        results = get_unit_test_scenarios(args.rtl_path)
        print(results)
    else:
        get_unit_tests(args.rtl_path, args.out_path)
