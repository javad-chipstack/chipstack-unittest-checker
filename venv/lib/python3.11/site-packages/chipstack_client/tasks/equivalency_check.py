"""Take two assertions for a DUT and check if they are equivalent."""

import io
from chipstack_client.client_v2 import ClientV2
from chipstack_common.svutils.formal_monitor_generator import (
    FormalTestCase,
    FormalCode,
)
from typing import TextIO


def check_equivalency(assertion1: str, assertion2: str, dut: TextIO) -> dict:
    """Check if two assertions are equivalent for a DUT.

    Args:
        assertion1: The first assertion to check.
        assertion2: The second assertion to check.
        dut: The DUT to check the assertions for.

    Returns:
        True if the assertions are equivalent, False otherwise.
    """
    client = ClientV2()
    dut_parsed_model = client.parse_design(dut, [])

    # Create a FormalTestCase from the code
    formal_test_1 = FormalTestCase.from_code(
        assertion1, dut_parsed_model, name="assertion_1"
    )
    formal_test_code_1 = formal_test_1.to_code()
    formal_test_2 = FormalTestCase.from_code(
        assertion2, dut_parsed_model, name="assertion_2"
    )
    formal_test_code_2 = formal_test_2.to_code()
    # assert becomes assume
    formal_test_code_2 = formal_test_code_2.replace("assert", "assume")

    # Generate monitor code
    formal_code = FormalCode.from_codeblocks(
        [formal_test_code_1, formal_test_code_2], dut_parsed_model
    )
    monitor_code = formal_code.to_code()

    # Call invoke jasper to check the equivalence
    result = client.run_formal_tests(
        module_name=dut_parsed_model["name"],
        clocks=[entry["name"] for entry in dut_parsed_model["clockPorts"]],
        resets=[entry["name"] for entry in dut_parsed_model["resetPorts"]],
        dut_files=[dut],
        sva_files=[monitor_code],
    )

    # Check if result is None and there is some error
    if result["result"] == None:
        print("WARNING: There was a Compilation error: ", result["log"])
        return {"isEqual": False, "metadata": result["log"]}
    else:
        assert_results = [
            assert_result["Result"]
            for assert_result in result["result"]["results"]["assert"]
        ]
        if "cex" in assert_results:
            return {"isEqual": False, "metadata": assert_results}
        else:
            return {"isEqual": True, "metadata": assert_results}


if __name__ == "__main__":
    result = check_equivalency(
        assertion1="assert property (a |-> b);",
        assertion2="assert property (b |-> a);",
        dut=io.StringIO(
            "module DUT(input logic clk, input logic reset, input logic a, input logic b);\nendmodule"
        ),
    )
    print(
        "Assertions are equivalent"
        if result["isEqual"]
        else "Assertions are not equivalent"
    )
