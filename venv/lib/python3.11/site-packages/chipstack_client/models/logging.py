from pydantic import BaseModel
from typing import List, Dict
from enum import Enum

from chipstack_client.models.syntax_correction import CorrectionContext


class SyntaxResultTypeEnum(Enum):
    syntax_passed = "syntax_passed"
    syntax_failed = "syntax_failed"
    failed_to_check = "failed_to_check"
    not_checked = "not_checked"


class FormalCorrectionContextLog(CorrectionContext):
    type: str


class FormalCorrectionLog(BaseModel):
    correction_context: CorrectionContext
    suggested_correction: str


class FormalSyntaxCorrectionLogs(BaseModel):
    code_to_check: str = ""
    parsed_design: dict = {}
    mental_model: dict = {}
    syntax_check_history: Dict[str, List[FormalCorrectionContextLog]] = {}
    correction_history: Dict[str, List[FormalCorrectionLog]] = {}
    code_to_show: str = ""
